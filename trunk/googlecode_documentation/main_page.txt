=Mongrel Mapper=

==Overview==
The <a href="http://www.mongodb.org/display/DOCS/Erlang+Language+Center">Erlang MongoDB driver</a> encapsulates a MongoDB document as a tuple of key-value pairs. The use of tuples can make for verbose and difficult to maintain code. A more compact and readable way to represent documents is as Erlang records since Erlang provides syntactic sugar for manipulating records more safely and concisely than by using tuples directly.

Mongrel is a library/OTP application that can map Erlang records to MongoDB documents. It aspires to be the Erlang equivalent of the MongoDB Object/Document mappers found in other languages, e.g. !MongoEngine for Python or Morphia for Java.

==Installation==
<a href="http://code.google.com/p/mongrel/downloads/list">Download</a> the *mongrel-x.y.z.zip* archive. Unzip it to a location accessible from the Erlang environment, e.g. a directory referenced in the $ERL_LIBS environment variable.

You will need to have installed the official MongoDB driver from <a href="https://github.com/TonyGen/mongodb-erlang">!GitHub</a>.

==Running Mongrel==
Mongrel is an OTP application and can be started by executing `application:start(mongrel)`. Since Mongrel relies on the MongoDB driver, you will need to start the MongoDB driver application first (by running `application:start(mongodb)`).

==Documentation==
The EDocs are included in the mongrel zip archive. The API is also documented <a href="http://mongrelmapper.appspot.com/api/index.html">online</a>. 

==A Mongrel Demo==
===The MongoDB Driver===
It's not essential to be familiar with the MongoDB driver but it may help. Two useful links are:
 * The MongoDB <a href="http://api.mongodb.org/erlang/mongodb/">API</a>
 * A <a href="https://github.com/TonyGen/mongodb-erlang/blob/master/README.md">readme</a> that illustrates the driver's use.

===Sample application===
To demonstrate !MongrelMapper, we'll populate a database with books from the Monty Python Bookshop Sketch.
 
<wiki:video url="http://www.youtube.com/watch?v=eCM2nEBE0RY"/>

The `book_database` module (below and included in the archive) exposes two functions to populate the database and to read all books from the database.

<code language="Erlang">
-module(book_database).
-export([add_mappings/0, populate/0, get_all/0]).
-include_lib("mongrel/include/mongrel_macros.hrl").

% Our "domain objects" are books, authors and reviews
-record(book, {'_id', title, isbn, author, reviews}).
-record(author, {'_id', first_name, last_name}).
-record(review, {star_rating, comment}).

add_mappings() ->
	% For mongrel to work, we need to specify how to map books, authors and reviews.
	mongrel_mapper:add_mapping(?mapping(book)),
	mongrel_mapper:add_mapping(?mapping(author)),
	mongrel_mapper:add_mapping(?mapping(review)).
	
populate() ->
	% Create some books, authors and reviews.
	Author1 = #author{?id(), last_name = <<"Eliott">>},
	Book1 = #book{?id(), title = <<"Thirty Days in the Samarkind Desert with the Duchess of Kent">>, author = Author1},
	Review2 = #review{star_rating = 5, comment = <<"By an Irish gentleman whose name eludes me">>},
	Book2 = #book{?id(),  title = <<"A Hundred and One Ways to start a Fight">>, reviews = [Review2]},
	Author3 = #author{?id(), first_name = <<"Edmund">>, last_name = <<"Wells">>},
	Book3 = #book{?id(), title = <<"David Copperfield">>, author = Author3},
	Book4 = #book{?id(), title = <<"Grate Expectations">>, author = Author3},
	Author5 = #author{?id(), first_name = <<"Charles">>, last_name = <<"Dikkens">>},
	Book5 = #book{?id(), title = <<"Rarnaby Budge">>, author = Author5},
	Review6a = #review{comment = <<"Warning: Not the expurgated version.">>},
	Review6b = #review{star_rating = 2, comment = <<"Might be interesting to bird-watchers.">>},
	Book6 = #book{?id(), title = <<"Olsen's Standard Book of British Birds">>, reviews = [Review6a, Review6b]},

	{ok, Connection} = mongo:connect(localhost),
	mongrel:do(safe, master, Connection, mongrel_books, 
			   fun() ->
					   mongrel:delete(#author{}),
					   mongrel:delete(#book{}),
					   mongrel:insert_all([Book1, Book2, Book3, Book4, Book5, Book6])
			   end).

get_all() ->
	{ok, Connection} = mongo:connect(localhost),
	mongrel:do(safe, master, Connection, mongrel_books, 
			   fun() ->
					   Cursor = mongrel:find(#book{}),
					   mongrel_cursor:rest(Cursor)
			   end).
</code>


===Domain Objects===
The objects in our domain are:
 * Books
 * Authors
 * Reviews

These objects are specified in the records declared near the top of the source file. The most important feature to note of the records is
 * Book and author records have an '`_`id' field
 * Review records do not ave an '`_`id' field.

If a record has an '`_`id' field, Mongrel assumes that the record must be stored in its own collection. A book review can only be associated with one book, so a book review can reasonably be stored as an attribute of a book in a collection of books, so we do not assign an '`_`id' attribute to a review.

===Code Overview===
The code illustrates:
 * How to register record mappings (using the `mongrel_mapper:add_mapping/1` function and the `?mapping` macro). This is shown in the `add_mappings/0` function.
 * How to establish a connection to a database use the `mongo:connect/1` function. Note that this is function is exported by the MongoDB driver and is not part of mongrel.
 * How to invoke CRUD operations in an anonymous function invoked by the `mongrel:do/5` function. The `do/5` function specifies connection parameters (e.g., in this case writes are *safe*). The `mongrel:do/5` function has the same semantics as the `mongo:do/5` function but, you should use the mongrel function rather than the mongo function otherwise cursors will not be handled correctly.
 * How to do deletes using the `mongrel:delete/1` function. This function is similar to the driver's `mongo:delete/2` function.
 * How to do creates using the `mongrel:insert_all/1` function. This function is similar to the `mongo:insert_all/2` function. 
 * How to do reads using the `mongrel:find/1` function. The `find/1` function returns a mongrel_cursor:cursor() type. The `mongo:find/2` function is similar except that it returns a `mongo_cursor:cursor()` type. 
 * How to retrieve results from a cursor, using the `mongrel_cursor:rest/1` function. The results are returned as a list of records. The driver's corresponding function, `mongo_cursor:rest/1`, returns a list where the elements are of type `bson:document()` rather than records. 

===Running the Code===
Make sure that the *mongod* server is running on localhost.

====Adding the Record Mappings====
To run the `book_database` code, you need to ensure that the `mongodb` and `mongrel` applications are started. Then execute `book_database:add_mappings()` as in the trace below.

<pre>
1> c(book_database).
{ok,book_database}
2> application:start(mongodb).
ok
3> application:start(mongrel).
ok
4> book_database:add_mappings().
ok
5> 
</pre>

The `add_mappings/0` function invokes the `mongrel_mapper:add_mapping/1` function that stores {key, value} pairs where the key is the record name (e.g. book or author) and the value is a list of field identifiers (e.g. `_`id, title, isbn and author for a book record).

====Populating the Database====
The `book_database:populate/0` function creates some author, book and review records. Notice in particular, the use of the `?id()` macro that populates the `_id` fields of the book and author records. For example, `Author1 = #author{?id(), last_name = <<"Eliott">>}`. The `?id()` macro is defined as `'_id'=mongodb_app:gen_objectid()` and its purpose is to save time typing a commonly needed snippet of code.

The anonymous function passed as a parameter to the `mongrel:do/5` function deletes all book and author records from the `'mongrel_books'` database before populating it with the list of books passed to the `mongrel:insert_all/1` function.

Executing `book_database:populate()` will produce a result similar to that below where a list of six object identifiers is returned; the six ID's are the identifiers created for the six books.

<pre>
5> book_database:populate().
{ok,[{<<79,92,226,190,138,250,150,9,38,0,0,2>>},
     {<<79,92,226,190,138,250,150,9,38,0,0,3>>},
     {<<79,92,226,190,138,250,150,9,38,0,0,5>>},
     {<<79,92,226,190,138,250,150,9,38,0,0,6>>},
     {<<79,92,226,190,138,250,150,9,38,0,0,8>>},
     {<<79,92,226,190,138,250,150,9,38,0,0,9>>}]}
6> 
</pre>

====Reading the Database====
The `book_example:get_all/0` function retrieves all the books from the 'mongrel_books' database. First, though, it's instructive to use the `mongo` shell to see what was written by the previous code execution.

